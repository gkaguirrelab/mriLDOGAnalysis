#!/usr/bin/python3

import os
import json
import nibabel as nib
import matplotlib.pyplot as plt
import imageio

###################################### Define Fucntions #####################################
os.system('FSLDIR=/usr/lib/fsl/5.0;PATH=$FSLDIR:${PATH};export FSLDIR PATH;/usr/lib/fsl/5.0/bet')
def prepare_mprage(subject_id, path_to_mprage, centre_of_gravity_x, centre_of_gravity_y, centre_of_gravity_z, struct_to_struct_transform, extraction_threshold, output_folder):
    
    # This script prepares the MPRAGE image(s) for the analysis. Pipeline:  
        # 1 - Bias correcting each MPRAGE images
        # 2 - Registering MPRAGES if there is more than one
        # 3 - Averaging the registered and target MPRAGE if there is more than one
        # 4 - Skull stripping the MPRAGE
        # 5 - x-y flipping the skull stripped MPRAGE
    
    # Create the output folder
    preprocessed_mprage_folder = os.path.join(output_folder, subject_id + '_preprocessed_mprage')
    if not os.path.exists(preprocessed_mprage_folder):
        os.system('mkdir %s' % preprocessed_mprage_folder)
        
    # Find MPRAGE images
    mprage_images = os.listdir(path_to_mprage)
    
    # Biascorrection 
    for i in mprage_images:
        call = "/usr/lib/ants/N4BiasFieldCorrection -d 3 -i %s -o %s -v" % (os.path.join(path_to_mprage, i),
                                                                                  os.path.join(path_to_mprage, i))
        os.system(call)
    
    registered_mprages = os.path.join(preprocessed_mprage_folder, 'registered')
    if not os.path.exists(registered_mprages):
        os.system('mkdir %s' % registered_mprages) 
        
    # Register MPRAGEs if there are more than one of them
    if len(mprage_images) > 1: 
        os.system('mv %s %s/' % (os.path.join(path_to_mprage, mprage_images[0]), registered_mprages))
        fixed = os.path.join(registered_mprages, os.listdir(registered_mprages)[0])
        
        if struct_to_struct_transform == 'Rigid':
            transform = 'r'
        elif struct_to_struct_transform == 'Affine':
            transform = 'a'
        elif struct_to_struct_transform == 'SyN':
            transform = 's'
        count = 0
        for i in os.listdir(path_to_mprage):
            count += 1
            moving = os.path.join(path_to_mprage, i)
            print('Registering %s to %s' % (moving, fixed))
            register_call = 'export ANTSPATH=/usr/lib/ants/;export PATH=${ANTSPATH}:$PATH;/usr/lib/ants/antsRegistrationSyN.sh -d 3 -t %s -f %s -m %s -o %s -n 6' % (transform,
                                                                                                                                                                                 fixed,
                                                                                                                                                                                 moving,
                                                                                                                                                                                 os.path.join(registered_mprages, subject_id + '_%sregistered' % count))
            os.system(register_call)
        
        os.system('cd %s; rm *InverseWarped.nii.gz' % registered_mprages)         
        
        # Average the registered MPRAGE with the target
        average_call = '/usr/lib/ants/AverageImages 3 %s 1 %s' % (os.path.join(preprocessed_mprage_folder, subject_id + '_averaged_mprages.nii.gz'),
                                                                        os.path.join(registered_mprages, '*.nii.gz'))
        os.system(average_call)
        averaged_mprage = os.path.join(preprocessed_mprage_folder, subject_id + '_averaged_mprages.nii.gz')
   
    else:
        averaged_mprage = os.path.join(mprage_images[0])        
    
    # Brain extraction mask (created by fsl BET)
    extracted_mprage = os.path.join(preprocessed_mprage_folder, subject_id + '_brain_averaged_mprages.nii.gz')
    extracted_mask = os.path.join(preprocessed_mprage_folder, subject_id + '_brain_averaged_mprages_mask.nii.gz')
    call = 'FSLDIR=/usr/lib/fsl/5.0;. /etc/fsl/5.0/fsl.sh;PATH=${FSLDIR}:${PATH};export FSLDIR PATH;/usr/lib/fsl/5.0/bet %s %s -f %s -c %s %s %s -m' % (averaged_mprage, extracted_mprage,
                                                                                                                                                                     extraction_threshold,
                                                                                                                                                                     centre_of_gravity_x,
                                                                                                                                                                     centre_of_gravity_y, 
                                                                                                                                                                     centre_of_gravity_z)
    os.system(call)
    
        
    # Brain extraction segmentation (altAnts)
    call2 = 'export ANTSPATH=/usr/lib/ants/;export PATH=${ANTSPATH}:$PATH;/usr/lib/ants/brainExtractionSegmentation.pl --input %s --initial-brain-mask %s --bias-correct 0 --output-root %s' % (averaged_mprage,
                                                                                                                     extracted_mask,
                                                                                                                     os.path.join(preprocessed_mprage_folder, subject_id + '_final')) 
    os.system(call2)
    extracted_brain = os.path.join(preprocessed_mprage_folder, subject_id + '_finalExtractedBrain.nii.gz')

    return (preprocessed_mprage_folder, averaged_mprage, extracted_brain)    
#     #Flip the averaged and skull stripped mprage
#    flipped_extracted_brain = os.path.join(preprocessed_mprage_folder, 'flipped_finalExtractedBrain.nii.gz')
#    flip_call = 'FSLDIR=/usr/lib/fsl/5.0;. /etc/fsl/5.0/fsl.sh;PATH=${FSLDIR}:${PATH};export FSLDIR PATH;/usr/lib/fsl/5.0/fslswapdim %s x -y z %s' % (extracted_mprage, flipped_extracted_brain)
#    os.system(flip_call)
    
#    return (preprocessed_mprage_folder, averaged_mprage, extracted_brain, flipped_extracted_brain)


def warp_to_invivo(subject_id, mprage_image, template_path, output_folder, num_threads): 
    
    # This function is a wrapper around ANTs SyN registration. 
        
    # Warp to Template (use 5 threads change -n flag in warp_call if you want more threads)

    warp_results_folder = os.path.join(output_folder, subject_id + '_reg_avgmprage2atlas')
    if not os.path.exists(warp_results_folder):
        os.system('mkdir %s' % warp_results_folder)
    
    warp_call = 'export ANTSPATH=/usr/lib/ants/;export PATH=${ANTSPATH}:$PATH;/usr/lib/ants/antsRegistrationSyN.sh -d 3 -f %s -m %s -o %s -n %s' % (template_path, mprage_image, os.path.join(warp_results_folder, subject_id + '_'),str(num_threads))
    os.system(warp_call)
    warped_mprage = os.path.join(warp_results_folder, subject_id + '_Warped.nii.gz')
    generic_affine = os.path.join(warp_results_folder, subject_id + '_0GenericAffine.mat')
    
    return (warp_results_folder, warped_mprage, generic_affine)

def make_plot(subject_id, base_image, overlay, title, filename, x, y, z, apect_ratio_vector, output_folder):
    
    # This function simply gets two MRI images as inputs and overlays them 
    #using different colors for each image. Used as a diagnostic method.
        
    fig, (ax1, ax2, ax3) = plt.subplots(1,3)
    fig.suptitle(title, fontsize=20)

    epi_img = nib.load(base_image)
    epi_img_data = epi_img.get_fdata()
    ax1.imshow(epi_img_data[x,:,:], cmap="gray", aspect = apect_ratio_vector[0])
    ax2.imshow(epi_img_data[:,y,:], cmap="gray", aspect = apect_ratio_vector[1])
    ax3.imshow(epi_img_data[:,:,z], cmap="gray", aspect = apect_ratio_vector[2])
    ax1.axis('off')
    ax2.axis('off')
    ax3.axis('off')  
    
    if overlay != 'NA':
        epi_img = nib.load(overlay)
        epi_img_data = epi_img.get_fdata()
        ax1.imshow(epi_img_data[x,:,:], cmap="hot", alpha=0.4, aspect = apect_ratio_vector[3])
        ax2.imshow(epi_img_data[:,y,:], cmap="hot", alpha=0.4, aspect = apect_ratio_vector[4])
        ax3.imshow(epi_img_data[:,:,z], cmap="hot", alpha=0.4, aspect = apect_ratio_vector[5])
        ax1.axis('off')
        ax2.axis('off')
        ax3.axis('off')

    plt.savefig(os.path.join(output_folder, subject_id + '_' + filename))    

def make_gif(image_folder, gif_name, output_folder):
    images = []
    for filename in os.listdir(image_folder):
        images.append(imageio.imread(os.path.join(image_folder, filename)))
        imageio.mimsave('/%s/%s.gif' % (output_folder, gif_name), images, duration=0.7)
        
###################### Define the Paths and parameters ###########################

# os.system('cat /proc/cpuinfo')

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
os.system('mkdir %s'%first_output_dir)
T1folder = os.path.join(first_output_dir, 'T1')
os.system('mkdir %s' % T1folder)

MPRAGE_01_folder = os.path.join(flywheel_base, 'input/MPRAGE_01')
MPRAGE_01 = os.path.join(MPRAGE_01_folder, os.listdir(MPRAGE_01_folder)[0])
os.system('cp %s %s' % (MPRAGE_01, T1folder))

MPRAGE_02_folder = os.path.join(flywheel_base, 'input/MPRAGE_02')
if os.path.exists(MPRAGE_02_folder):
    MPRAGE_02 = os.path.join(MPRAGE_02_folder, os.listdir(MPRAGE_02_folder)[0])
    os.system('cp %s %s' % (MPRAGE_02, T1folder))

MPRAGE_03_folder = os.path.join(flywheel_base, 'input/MPRAGE_03')
if os.path.exists(MPRAGE_03_folder):
    MPRAGE_03 = os.path.join(MPRAGE_03_folder, os.listdir(MPRAGE_03_folder)[0])
    os.system('cp %s %s' % (MPRAGE_03, T1folder))

MPRAGE_04_folder = os.path.join(flywheel_base, 'input/MPRAGE_04')
if os.path.exists(MPRAGE_04_folder):
    MPRAGE_04 = os.path.join(MPRAGE_04_folder, os.listdir(MPRAGE_04_folder)[0])
    os.system('cp %s %s' % (MPRAGE_04, T1folder))

MPRAGE_05_folder = os.path.join(flywheel_base, 'input/MPRAGE_05')
if os.path.exists(MPRAGE_05_folder):
    MPRAGE_05 = os.path.join(MPRAGE_05_folder, os.listdir(MPRAGE_05_folder)[0])
    os.system('cp %s %s' % (MPRAGE_05, T1folder))

Template_folder = os.path.join(flywheel_base, 'input/Template')
if os.path.exists(Template_folder):
    Template = os.path.join(Template_folder, os.listdir(Template_folder)[0])
else:
    Template = '/opt/invivoTemplate.nii.gz'
    Template_with_skull = '/opt/invivoTemplate-WithSkull.nii.gz'

###################Parse Config Here############################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

centre_of_gravity_x = config['centreOfGravityX']
centre_of_gravity_y = config['centreOfGravityY']
centre_of_gravity_z = config['centreOfGravityZ']
subject_id = config['subjectId']
extraction_threshold = config['extractionThreshold']
number_of_threads = config['numberOfThreads']
struct_to_struct_transform = config['structToStructTransform']
transformationMethod = config['transformationMethod']

# Save subject ID to a txt file 
text_file = os.path.join(first_output_dir, 'subject_id.txt')
os.system('touch %s' % text_file)
text_open = open('%s' % text_file, 'w')
text_open.write('%s' % subject_id)
text_open.close()

###################Run Algorithm################################
   
# Bias corrects mprage images, registers, averages (normalized), skull strips and flips
preprocessed_mprage_folder, averaged_mprage, extracted_brain = prepare_mprage(subject_id, T1folder, centre_of_gravity_x, centre_of_gravity_y, centre_of_gravity_z, struct_to_struct_transform, extraction_threshold, first_output_dir)

# Plot averaged structural
make_plot(subject_id, averaged_mprage, 'NA', 'MPRAGE Average', 'averaged_mprage.png', centre_of_gravity_x, centre_of_gravity_y, centre_of_gravity_z, [1,1,1,1,1,1], final_output_dir)
   
# Saves a brain extraction diagnostic image
if transformationMethod == 'skullStrippedMprage-skullStrippedTemplate':
    make_plot(subject_id, averaged_mprage, extracted_brain, 'Brain Extraction Results', 'brain_extraction_qa.png', centre_of_gravity_x, centre_of_gravity_y, centre_of_gravity_z, [1,1,1,1,1,1], final_output_dir)
    
# Warps the averaged mprage to the template 
if transformationMethod == 'skullStrippedMprage-skullStrippedTemplate':
    warp_results_folder, warped_mprage, standard_generic = warp_to_invivo(subject_id, extracted_brain, Template, first_output_dir, number_of_threads)
elif transformationMethod == 'wholeMprage-skullStrippedTemplate':
    warp_results_folder, warped_mprage, standard_generic = warp_to_invivo(subject_id, averaged_mprage, Template, first_output_dir, number_of_threads)
elif transformationMethod == 'wholeMprage-wholeTemplate':
    warp_results_folder, warped_mprage, standard_generic = warp_to_invivo(subject_id, averaged_mprage, Template_with_skull, first_output_dir, number_of_threads)
    
# Saves some more diagnostic images for registrations
temporary = '/tempim/'
os.system('mkdir %s' % temporary)
make_plot(subject_id, Template, 'NA', 'Warp results', 'im1.png', 131, 105, 45, [0.6, 0.6, 1.4, 0.6, 0.6, 1.4], temporary)
make_plot(subject_id, warped_mprage, 'NA', 'Warp results', 'im2.png', 131, 105, 45, [0.6, 0.6, 1.4, 0.6, 0.6, 1.4], temporary)
make_gif(temporary, subject_id + '_' + 'mprage2template_qa', final_output_dir)

################## Zip everything and output ##################################
# Zip and move the maps
os.system('cd %s; zip -q -r %s *'%(first_output_dir, os.path.join(final_output_dir, subject_id + '_preprocessedStruct.zip')))
