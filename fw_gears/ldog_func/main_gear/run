#!/usr/bin/python3

import os
import imageio
import json
import nibabel as nib
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

###################################### Define Functions #####################################
os.system('bet')

def topup(subject_id, total_readout_time_AP, total_readout_time_PA, path_to_recon_fmris, path_to_epi, output_folder):
    
    # This script calculates topup and applies it on the EPI images. The AP and
    # PA readout times should be used. This information can be found in the 
    # nifti header.
    
    direction_vector_AP = '0 -1 0 %s\n' % str(total_readout_time_AP)
    direction_vector_PA = '0 1 0 %s' % str(total_readout_time_PA)
    acparam_file = os.path.join(path_to_recon_fmris, subject_id + '_acqparams.txt')
    os.system('touch %s' % acparam_file)
    textfile = open(acparam_file, 'w')
    textfile.write(direction_vector_AP)
    textfile.write(direction_vector_PA)
    textfile.close()
    
    # Find the AP and PA images
    for i in os.listdir(path_to_recon_fmris):
        if i[-2:] == 'gz' or i[-6:] == 'gz':
            if '1' in os.popen('/usr/local/ANTs/bin/PrintHeader %s | grep descrip | grep phase |  cut -d \';\' -f 3 | cut -d \'=\' -f 2' % os.path.join(path_to_recon_fmris,i)).read():
                ap_image = os.path.join(path_to_recon_fmris, i)
        if i[-2:] == 'gz' or i[-6:] == 'gz':
            if '0' in os.popen('/usr/local/ANTs/bin/PrintHeader %s | grep descrip | grep phase |  cut -d \';\' -f 3 | cut -d \'=\' -f 2' % os.path.join(path_to_recon_fmris,i)).read():
                pa_image = os.path.join(path_to_recon_fmris, i)

    # Merge AP and PA singe-rep images into one for topup
    top_up_folder = os.path.join(output_folder, subject_id + '_top_up')
    if not os.path.exists(top_up_folder):
        os.system('mkdir %s' % top_up_folder)
    os.system('FSLDIR=/usr/local/fsl;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}/bin:${PATH};export FSLDIR PATH;/usr/local/fsl/bin/fslmerge -a %s %s %s' % (os.path.join(top_up_folder, subject_id + '_AP+PA'),
                                                                                                                                                              ap_image,
                                                                                                                                                              pa_image))
    
    # Calculate the field
    os.system('FSLDIR=/usr/local/fsl;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}/bin:${PATH};export FSLDIR PATH;/usr/local/fsl/bin/topup --imain=%s --datain=%s '
              '--config=b02b0.cnf --out=%s --iout=%s --fout=%s' % (os.path.join(top_up_folder, subject_id + '_AP+PA.nii.gz'),
                                                                   acparam_file,
                                                                   os.path.join(top_up_folder, subject_id + '_topup_results'),
                                                                   os.path.join(top_up_folder, subject_id + '_b0_unwarped'),
                                                                   os.path.join(top_up_folder, subject_id + '_fieldmap_Hz')))

    # Apply correction to the EPI image(s)    
    corrected_epi = os.path.join(output_folder, subject_id + '_corrected_epi')
    if not os.path.exists(corrected_epi):
        os.system('mkdir %s' % corrected_epi)

    for i in os.listdir(path_to_epi):
        if int(os.popen('/usr/local/ANTs/bin/PrintHeader %s | grep descrip | grep phase |  cut -d \';\' -f 3 | cut -d \'=\' -f 2' % os.path.join(path_to_epi, i)).read()) == 1:
            os.system('FSLDIR=/usr/local/fsl;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}/bin:${PATH};export FSLDIR PATH;/usr/local/fsl/bin/applytopup --imain=%s --inindex=1 --method=jac --datain=%s --topup=%s --out=%s/%s_corrected_%s' % (os.path.join(path_to_epi, i),
                                                                                                                                                                                                                                                acparam_file,
                                                                                                                                                                                                                                                os.path.join(top_up_folder, subject_id + '_topup_results'),
                                                                                                                                                                                                                                                corrected_epi,
                                                                                                                                                                                                                                                subject_id,
                                                                                                                                                                                                                                                i))
        elif int(os.popen('/usr/local/ANTs/bin/PrintHeader %s | grep descrip | grep phase |  cut -d \';\' -f 3 | cut -d \'=\' -f 2' % os.path.join(path_to_epi, i)).read()) == 0:
            os.system('FSLDIR=/usr/local/fsl;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}/bin:${PATH};export FSLDIR PATH;/usr/local/fsl/bin/applytopup --imain=%s --inindex=2 --method=jac --datain=%s --topup=%s --out=%s/%s_corrected_%s' % (os.path.join(path_to_epi, i),
                                                                                                                                                                                                                                                acparam_file,
                                                                                                                                                                                                                                                os.path.join(top_up_folder, subject_id + '_topup_results'),
                                                                                                                                                                                                                                                corrected_epi,
                                                                                                                                                                                                                                                subject_id,
                                                                                                                                                                                                                                                i))
        else:
            raise ValueError('Your time series image is neither in AP nor in PA direction')
    
    # Create a target topuped image for the motion correction
    os.system('FSLDIR=/usr/local/fsl;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}/bin:${PATH};export FSLDIR PATH;/usr/local/fsl/bin/applytopup --imain=%s --inindex=1 '
              '--method=jac --datain=%s --topup=%s --out=%s' % (ap_image,
                                                                acparam_file,
                                                                os.path.join(top_up_folder, subject_id + '_topup_results'),
                                                                os.path.join(top_up_folder, subject_id + '_moco_target')))
    return (top_up_folder, corrected_epi)

def moco(subject_id, epi_folder, top_up_folder, output_folder): 
    
    # This function does motion correction and calculates time derivatives of
    # the output motion covariates
    
    # Motion Correction
    moco_cov = os.path.join(output_folder, subject_id + '_moco_covariates')
    mc_to_this = os.path.join(top_up_folder, subject_id + '_moco_target.nii.gz')
    if not os.path.exists(moco_cov):
        os.system('mkdir %s' % moco_cov)
    for i in os.listdir(epi_folder):
        mcflirt_call = 'FSLDIR=/usr/local/fsl;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}/bin:${PATH};export FSLDIR PATH;/usr/local/fsl/bin/mcflirt -in %s -o %s -reffile %s -dof 12 -plots' % (os.path.join(epi_folder, i),
                                                                                                                                                                                                  os.path.join(epi_folder, i),
                                                                                                                                                                                                  mc_to_this)
        os.system(mcflirt_call)
    os.system('mv %s/*.par %s/%s.par' % (epi_folder, moco_cov, subject_id + '_motion_params'))
    
    # Motion derivatives
    for i in os.listdir(moco_cov):
        original_par = os.path.join(moco_cov, i)
        pd.set_option('display.precision', 8)
        data = pd.read_csv(original_par, sep='  ', header=None, engine='python')
        data_sqrted = data ** 2
        data_diffed = data.diff(periods=1, axis=0)
        data_diffed = data_diffed.fillna(0)
        data_diffed_sqrt = data_diffed ** 2 
        data_concatted = pd.concat([data, data_sqrted, data_diffed, data_diffed_sqrt], axis=1)
        np.savetxt(original_par, data_concatted, delimiter='  ')
        
    return (moco_cov)

def apply_warp(subject_id, epi_folder, template_path, output_folder, path_to_generic_affine, path_to_warp, flipped=False):
        
    # Warp EPI images to invivo template
    if flipped == False:
        warped_epi = os.path.join(output_folder, subject_id + '_preprocessed_epi')
        conv = subject_id + '_final_preprocessed'
    else:
        warped_epi = os.path.join(output_folder, subject_id + '_flipped_preprocessed_epi')
        conv = subject_id + '_final_flipped_preprocessed'      
    if not os.path.exists(warped_epi):
        os.system('mkdir %s' % warped_epi)
        
    for i in os.listdir(epi_folder):
        os.system('/usr/local/ANTs/bin/antsApplyTransforms --float --default-value 0 '
                  '--input %s --input-image-type 3 '
                  '--interpolation Linear --output %s/%s_%s '
                  '--reference-image %s '
                  '--transform %s --transform %s '
                  '-v 1' % (os.path.join(epi_folder, i),
                            warped_epi, conv, i,
                            template_path,
                            path_to_warp,
                            path_to_generic_affine))
              
    return (warped_epi)

def make_plot(subject_id, base_image, overlay, title, filename, x, y, z, output_folder):
    
    # This function simply gets two MRI images as inputs and overlays them 
    #using different colors for each image. Used as a diagnostic method.
    
    diagnostic_images = os.path.join(output_folder, 'diagnostic_images')
    if not os.path.exists(diagnostic_images):
        os.system('mkdir %s' % diagnostic_images)
        
    fig, (ax1, ax2, ax3) = plt.subplots(1,3)
    fig.suptitle(title, fontsize=20)

    epi_img = nib.load(base_image)
    epi_img_data = epi_img.get_fdata()
    ax1.imshow(epi_img_data[x,:,:], cmap="gray")
    ax2.imshow(epi_img_data[:,y,:], cmap="gray")
    ax3.imshow(epi_img_data[:,:,z], cmap="gray")
    ax1.axis('off')
    ax2.axis('off')
    ax3.axis('off')  
    
    if overlay != 'NA':
        epi_img = nib.load(overlay)
        epi_img_data = epi_img.get_fdata()
        ax1.imshow(epi_img_data[x,:,:], cmap="hot", alpha=0.4)
        ax2.imshow(epi_img_data[:,y,:], cmap="hot", alpha=0.4)
        ax3.imshow(epi_img_data[:,:,z], cmap="hot", alpha=0.4)
        ax1.axis('off')
        ax2.axis('off')
        ax3.axis('off')

    plt.savefig(os.path.join(diagnostic_images, subject_id + '_' + filename))    
    
    return(diagnostic_images)
    
def make_gif(image_folder, gif_name, output_folder):
    images = []
    for filename in os.listdir(image_folder):
        images.append(imageio.imread(os.path.join(image_folder, filename)))
        imageio.mimsave('/%s/%s.gif' % (output_folder, gif_name), images, duration=0.7)

#def flip_epi(epi_folder, output_folder):
#    
#    # This function x-y flips the EPI images.
#
#    # Flip 4D hemispheres 
#    flipped_epi = os.path.join(output_folder, 'flipped')
#    if not os.path.exists(flipped_epi):
#        os.system('mkdir %s' % flipped_epi)
#    for i in os.listdir(epi_folder):
#        corrected_imaj = os.path.join(epi_folder, i)
#        flipped_imaj = os.path.join(flipped_epi, i)
#        flip_call = 'fslswapdim %s x -y z %s' % (corrected_imaj, flipped_imaj)
#        os.system(flip_call)
#        
#    return (flipped_epi)
#
#def average_org_and_flipped(original_epi_path, flipped_epi_path, output_folder):   
#    
#    # This function averages the processed original and processed flipped epi images
#    
#    final_epi = os.path.join(output_folder, 'final_preprocessed_fmri')
#    if not os.path.exists(final_epi):
#        os.system('mkdir %s' % final_epi)
#    for i in os.listdir(original_epi_path):
#        avgcall = 'AverageImages 4 %s 0 %s %s' % (os.path.join(final_epi, 'final_' + i),
#                                                  os.path.join(original_epi_path, i),
#                                                  os.path.join(flipped_epi_path, 'flipped_' + i))
#        #avgcall = 'fslmaths %s -add %s -div 2 %s -odt float' % (os.path.join(original_epi_path, i),
#        #                                                        os.path.join(flipped_epi_path, 'flipped_' + i),
#        #                                                        os.path.join(final_epi, 'final_' + i))
#        os.system(avgcall)        
#    
#    return (final_epi)    

###################### Define the Paths and parameters ###########################

# os.system('cat /proc/cpuinfo')

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
os.system('mkdir %s'%first_output_dir)
invivo_template = '/opt/invivoTemplate.nii.gz'
resampled_template_path = '/opt/2x2x2resampled_invivoTemplate.nii.gz'
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')

# Get the time series
fMRITimeSeries_folder = os.path.join(flywheel_base, 'input/fMRITimeSeries')
fMRITimeSeries_zip = os.path.join(fMRITimeSeries_folder, os.listdir(fMRITimeSeries_folder)[0])

# Unzip the structural zip
preprocessedStruct_folder = os.path.join(flywheel_base, 'input/StructZip')
preprocessedStruct = os.path.join(preprocessedStruct_folder, os.listdir(preprocessedStruct_folder)[0]) 
struct_folder = '/opt/struct'
os.system('mkdir %s' % struct_folder)
os.system('unzip -q %s -d %s' % (preprocessedStruct, struct_folder))

# Create the scout folder and get the scout images
scout_folder = '/opt/scout'
os.system('mkdir %s' % scout_folder)

fMRIScoutAP_folder = os.path.join(flywheel_base, 'input/fMRIScoutAP')
fMRIScoutAP = os.path.join(fMRIScoutAP_folder, os.listdir(fMRIScoutAP_folder)[0])
os.system('cp %s %s' % (fMRIScoutAP, scout_folder))

fMRIScoutPA_folder = os.path.join(flywheel_base, 'input/fMRIScoutPA')
fMRIScoutPA = os.path.join(fMRIScoutPA_folder, os.listdir(fMRIScoutPA_folder)[0])
os.system('cp %s %s' % (fMRIScoutPA, scout_folder))

###################Parse Config Here############################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

total_readout_time_AP = config['totalReadoutTimeAP']
total_readout_time_PA = config['totalReadoutTimePA']
saveIntermediateFiles = config['saveIntermediateFiles']
fMRIName = config['fMRIName']

# Get the subject id and set some more paths
with open ('%s' % os.path.join(struct_folder, 'subject_id.txt'), 'r') as idfile:
    subject_id = idfile.readlines()[0]
generic_affine = os.path.join(struct_folder, subject_id + '_reg_avgmprage2atlas', subject_id + '_0GenericAffine.mat')
path_to_warp = os.path.join(struct_folder, subject_id + '_reg_avgmprage2atlas', subject_id + '_1Warp.nii.gz')

# If specified, add the fMRIName to subject id
if fMRIName != 'NA':
    subject_id = subject_id + '_' + fMRIName

###################Run Algorithm################################

# Calculate and apply topup
top_up_folder, corrected_epi = topup(subject_id, total_readout_time_AP, total_readout_time_PA, scout_folder, fMRITimeSeries_folder, first_output_dir)

# Motion correction and time derivative calculation. Overwrites the original 
# EPI images !!!
moco_cov = moco(subject_id, corrected_epi, top_up_folder, first_output_dir)

# Flip the EPI images 
#flipped_epi = flip_epi(corrected_epi, first_output_dir)

# Move flipped EPI to flipped mprage space. Overwrites the original flipped !!!
#lip_to_flip_registration(flipped_epi, flipped_extracted_brain, first_output_dir)

# Apply warps to the standard and flipped EPI images and downsample to 2mm using 
# the downsampled image as the target.
warped_epi = apply_warp(subject_id, corrected_epi, resampled_template_path, first_output_dir, generic_affine, path_to_warp, False)
#flipped_warped_epi = apply_warp(flipped_epi, resampled_template_path, first_output_dir, flipped_generic, True)

# Average flipped and unflipped EPI images
# final_epi = average_org_and_flipped(warped_epi, flipped_warped_epi, first_output_dir)

# Make an image of the invivo and warped EPI
temporary = '/usr/temp/'
os.system('mkdir %s' % temporary)
os.system('FSLDIR=/usr/local/fsl;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}/bin:${PATH};export FSLDIR PATH;/usr/local/fsl/bin/fslroi %s %s/singleEpi.nii.gz 0 1' % (os.path.join(warped_epi, os.listdir(warped_epi)[0]), temporary))
diagnostic_images = make_plot(subject_id, resampled_template_path, 'NA', 'EPI_2_Template', subject_id + '_invivo.png', 26, 23, 26, first_output_dir)
make_plot(subject_id, os.path.join(temporary, os.listdir(temporary)[0]), 'NA', 'EPI_2_Template', subject_id + '_final.png', 26, 23, 26, first_output_dir)

# Combine the images and make a gif
make_gif(diagnostic_images, 'EPI_2_Template', final_output_dir)

################## Zip everything and output ##################################

# Move mat, pdf and png files to the final output folder
#os.system('cd %s; mv %s %s/' % (os.path.join(first_output_dir, 'diagnostic_images'), '*.png', final_output_dir)) 
#os.system('cd %s; rm -r %s' % (first_output_dir, 'diagnostic_images'))

# Save output
os.system('cd %s; mv * %s' % (moco_cov, final_output_dir))
os.system('cd %s; zip -q %s *' % (warped_epi, os.path.join(final_output_dir, subject_id + '_preprocessedFunc.zip')))
os.system('rm -r %s' % moco_cov)
os.system('rm -r %s' % warped_epi)

# Save intermediate files if asked
if saveIntermediateFiles == True:
    os.system('mv /usr/file_organization.txt %s/' % first_output_dir)
    os.system('cd %s; zip -q -r %s *'%(first_output_dir, os.path.join(final_output_dir, subject_id + '_intermediateFiles.zip')))
