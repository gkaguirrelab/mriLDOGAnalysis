#!/usr/local/bin/python3.7

import os
import imageio
import json
import nibabel as nib
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# ants_path for printHeader = /usr/lib/ants/
# fsl_path  for fslmerge and topup =  FSLDIR=/usr/lib/fsl/5.0;. /etc/fsl/5.0/fsl.sh;PATH=${FSLDIR}:${PATH};export FSLDIR PATH;/usr/lib/fsl/5.0/

def topup(path_to_epi, total_readout_time_AP, total_readout_time_PA, path_to_recon_fmris, output_folder, fsl_path ='', ants_path=''):
    
    # This script calculates topup and applies it on the EPI images. The AP and
    # PA readout times should be used. This information can be found in the 
    # nifti header.
    
    # Image name 
    image_name = os.path.split(path_to_epi)[1][:-7]
    
    direction_vector_AP = '0 -1 0 %s\n' % str(total_readout_time_AP)
    direction_vector_PA = '0 1 0 %s' % str(total_readout_time_PA)
    acparam_file = os.path.join(path_to_recon_fmris, 'acqparams.txt')
    os.system('touch %s' % acparam_file)
    textfile = open(acparam_file, 'w')
    textfile.write(direction_vector_AP)
    textfile.write(direction_vector_PA)
    textfile.close()
    
    # Find the AP and PA images
    for i in os.listdir(path_to_recon_fmris):
        if i[-2:] == 'gz' or i[-6:] == 'gz':
            if '1' in os.popen('%s %s | grep descrip | grep phase |  cut -d \';\' -f 3 | cut -d \'=\' -f 2' % (os.path.join(ants_path, 'PrintHeader'), os.path.join(path_to_recon_fmris,i))).read():
                ap_image = os.path.join(path_to_recon_fmris, i)
            if '0' in os.popen('%s %s | grep descrip | grep phase |  cut -d \';\' -f 3 | cut -d \'=\' -f 2' % (os.path.join(ants_path, 'PrintHeader'), os.path.join(path_to_recon_fmris,i))).read():
                pa_image = os.path.join(path_to_recon_fmris, i)

    # Merge AP and PA singe-rep images into one for topup
    top_up_folder = os.path.join(output_folder, 'top_up')
    if not os.path.exists(top_up_folder):
        os.system('mkdir %s' % top_up_folder)
    os.system('%s -a %s %s %s' % (os.path.join(fsl_path, 'fslmerge'),
                                  os.path.join(top_up_folder, 'AP+PA'),
                                  ap_image,
                                  pa_image))
    
    # Calculate the field
    os.system('%s --imain=%s --datain=%s --config=b02b0.cnf --out=%s --iout=%s --fout=%s' % (os.path.join(fsl_path, 'topup'),
                                                                                              os.path.join(top_up_folder, 'AP+PA.nii.gz'),
                                                                                              acparam_file,
                                                                                              os.path.join(top_up_folder, 'topup_results'),
                                                                                              os.path.join(top_up_folder, 'b0_unwarped'),
                                                                                              os.path.join(top_up_folder, 'fieldmap_Hz')))

    # Apply correction to the EPI image(s)    
    corrected_epi_folder = os.path.join(output_folder, '1topup_corrected_epi')
    if not os.path.exists(corrected_epi_folder):
        os.system('mkdir %s' % corrected_epi_folder)

    if int(os.popen('%s %s | grep descrip | grep phase |  cut -d \';\' -f 3 | cut -d \'=\' -f 2' % (os.path.join(ants_path, 'PrintHeader') ,path_to_epi)).read()) == 1:
        os.system('%s --imain=%s --inindex=1 --method=jac --datain=%s --topup=%s --out=%s/1topup_%s' % (os.path.join(fsl_path, 'applytopup'),
                                                                                                        path_to_epi,
                                                                                                        acparam_file,
                                                                                                        os.path.join(top_up_folder, 'topup_results'),
                                                                                                        corrected_epi_folder, 
                                                                                                        image_name))
    elif int(os.popen('%s %s | grep descrip | grep phase |  cut -d \';\' -f 3 | cut -d \'=\' -f 2' % (os.path.join(ants_path, 'PrintHeader') ,path_to_epi)).read()) == 0:
        os.system('%s --imain=%s --inindex=2 --method=jac --datain=%s --topup=%s --out=%s/1topup_%s' % (os.path.join(fsl_path, 'applytopup'),
                                                                                                        path_to_epi,
                                                                                                        acparam_file,
                                                                                                        os.path.join(top_up_folder, 'topup_results'),
                                                                                                        corrected_epi_folder,
                                                                                                        image_name))
    else:
        raise ValueError('Your time series image is neither in AP nor in PA direction')
    
    corrected_epi = os.path.join(corrected_epi_folder, '1topup_' + image_name + '.nii.gz')
    
    # Create a target topuped image for the motion correction
    os.system('%s --imain=%s --inindex=1 --method=jac --datain=%s --topup=%s --out=%s' % (os.path.join(fsl_path, 'applytopup'),
                                                                                          ap_image,
                                                                                          acparam_file,
                                                                                          os.path.join(top_up_folder, 'topup_results'),
                                                                                          os.path.join(top_up_folder, 'AP_topup_corrected')))
    scout_topuped = os.path.join(top_up_folder, 'AP_topup_corrected.nii.gz')
    
    return (image_name, scout_topuped, corrected_epi)

def moco(subject_id, image_name, epi_image, output_folder, fsl_path=''): 
    
    # This function does motion correction and calculates time derivatives of
    # the output motion covariates
    
    # Motion Correction
    moco = os.path.join(output_folder, 'moco')
    moco_epi_folder = os.path.join(output_folder, '2motion_corrected_epi')
    
    if not os.path.exists(moco):
        os.system('mkdir %s' % moco)
    if not os.path.exists(moco_epi_folder):
        os.system('mkdir %s' % moco_epi_folder)
    
    motion_corrected_image_name = os.path.join(moco, '2moco_' + image_name)
    mcflirt_call = '%s -in %s -o %s -dof 6 -mats -plots -rmsrel -rmsabs' % (os.path.join(fsl_path, 'mcflirt'),
                                                                            epi_image,
                                                                            motion_corrected_image_name)
    os.system(mcflirt_call)

    # Make plots
    six_parameter_file = motion_corrected_image_name + '.par'
    abs_rms = motion_corrected_image_name + '_abs.rms'
    rel_rms = motion_corrected_image_name + '_rel.rms'
    os.system('%s -i %s -t \'MCFLIRT estimated rotations (radians)\' -u 1 --start=1 --finish=3 -a x,y,z -w 640 -h 144 -o %s' % (os.path.join(fsl_path, 'fsl_tsplot'),
                                                                                                                                six_parameter_file,
                                                                                                                                os.path.join(moco,'rotation.png')))
    os.system('%s -i %s -t \'MCFLIRT estimated translations (mm)\' -u 1 --start=4 --finish=6 -a x,y,z -w 640 -h 144 -o %s' % (os.path.join(fsl_path, 'fsl_tsplot'),
                                                                                                                              six_parameter_file,
                                                                                                                              os.path.join(moco,'translation.png')))
    os.system('%s -i %s,%s -t \'MCFLIRT estimated mean displacement (mm)\' -u 1 -w 640 -h 144 -a absolute,relative -o %s' % (os.path.join(fsl_path, 'fsl_tsplot'),
                                                                                                                             abs_rms, rel_rms,
                                                                                                                             os.path.join(moco,'displacement.png')))    
    
    # Calculate derivatives
    diff_file = motion_corrected_image_name + '_diff.dat'
    os.system('%s %s %s' % (os.path.join(fsl_path, 'mp_diffpow.sh'),
                            six_parameter_file,
                            diff_file))
    confound_file = os.path.join(moco_epi_folder, subject_id + '_motion_params_' + image_name + '.txt')
    os.system('paste -d \' \' %s %s  > %s' % (six_parameter_file, diff_file, confound_file))
    
    # Move files
    os.system('mv %s/*.nii.gz %s' % (moco, moco_epi_folder))
    motion_corrected_image = os.path.join(moco_epi_folder, '2moco_' + image_name + '.nii.gz')

    return (motion_corrected_image, confound_file)

def registerToScout(image_name, epi_image, scout_image, output_folder, fsl_path = '', ants_path = ''):
    
    scout_registered_epi_folder = os.path.join(output_folder, '3scout_registered_epi')   
    scout_registration_intermediate = os.path.join(output_folder, 'scout_registeration')
    
    if not os.path.exists(scout_registered_epi_folder):
        os.system('mkdir %s' % scout_registered_epi_folder)
    if not os.path.exists(scout_registration_intermediate):
        os.system('mkdir %s' % scout_registration_intermediate)    
    
    # get the mean TR for registration
    mean_tr = os.path.join(scout_registration_intermediate, 'inputMeanTR.nii.gz')
    os.system('%s %s -Tmean %s' % (os.path.join(fsl_path, 'fslmaths'), epi_image, mean_tr))
    
    # bias correct the mean TR and scout image and do a simple bet
    os.system('%s -i %s -o %s' % (os.path.join(ants_path, 'N4BiasFieldCorrection'), mean_tr, mean_tr))
    os.system('%s -i %s -o %s' % (os.path.join(ants_path, 'N4BiasFieldCorrection'), scout_image, scout_image))
    
    os.system('%s %s %s -f 0.2' % (os.path.join(fsl_path, 'bet'), mean_tr, mean_tr))
    os.system('%s %s %s -f 0.2' % (os.path.join(fsl_path, 'bet'), scout_image, scout_image))

    # Calculate a linear registration between the motion corrected image and scout    
    os.system('%s --verbose 1 --dimensionality 3 --float 0 --collapse-output-transforms 1 '
              '--output [ %s/toScout,%s/toScoutWarped.nii.gz,%s/toScoutInverseWarped.nii.gz ] '
              '--interpolation Linear --winsorize-image-intensities [ 0.005,0.995 ] --use-histogram-matching 1'
              '--initial-moving-transform [ %s,%s,1 ] --transform Rigid[ 0.01 ] '
              '--metric MI[ %s,%s,1,32,Regular,0.2 ] --convergence [ 1000x500x250x100,1e-6,10 ] '
              '--shrink-factors 8x4x2x1 --smoothing-sigmas 3x2x1x0vox ' % (os.path.join(ants_path, 'antsRegistration'),
                                                                            scout_registration_intermediate,scout_registration_intermediate,scout_registration_intermediate,
                                                                            scout_image,mean_tr,scout_image,mean_tr))

    # os.system('antsRegistrationSyN.sh -f %s -m %s -t r -n 6 -o %s' % (scout_image, mean_tr, os.path.join(scout_registration_intermediate,'toScout')))

    affine_matrix = os.path.join(scout_registration_intermediate, 'toScout0GenericAffine.mat')
    warped_to_scout = os.path.join(scout_registered_epi_folder, '3scoutRegistered_' + image_name + '.nii.gz')
    os.system('%s -d 3 --float 0 --default-value 0 --input %s --input-image-type 3 '
              '--output %s --reference-image %s --transform %s -v 1 ' % (os.path.join(ants_path, 'antsApplyTransforms'), epi_image, warped_to_scout, scout_image, affine_matrix))
  
    return (warped_to_scout,affine_matrix)

def apply_warp(image_name, subject_id, epi_image, template_image, output_folder, scout_registration_affine, path_to_generic_affine, path_to_warp, fsl_path='', ants_path ='',):
        
    # Warp EPI images to invivo template
    warped_epi_folder = os.path.join(output_folder, '4final_template_warped_epi')  
    if not os.path.exists(warped_epi_folder):
        os.system('mkdir %s' % warped_epi_folder)
    
    template_warp_applied = os.path.join(warped_epi_folder, subject_id + '_warped_epi_' + image_name + '.nii.gz')
    os.system('%s -d 3 --float 0 --default-value 0 --input %s --input-image-type 3 --output %s --reference-image %s --transform %s --transform %s --transform %s -v 1' % (os.path.join(ants_path, 'antsApplyTransforms'), 
                                                                                                                                                                epi_image, template_warp_applied,
                                                                                                                                                                template_image,
                                                                                                                                                                path_to_warp, path_to_generic_affine, scout_registration_affine))
    return(template_warp_applied)

def set_zero(data_path, template_path, output_path):
    data = nib.load(data_path)
    data_val = data.get_data()
    atlas = nib.load(template_path)
    atlas_data_val = atlas.get_data()
    zero_indexes = np.argwhere(atlas_data_val == 0)
    
    for index in zero_indexes:
        x = index[0]
        y = index[1]
        z = index[2]
        data_val[x, y, z] = 0
    
    nib.save(data, output_path)

def make_plot(subject_id, base_image, overlay, title, subtitle, filename, x, y, z, output_folder):
    
    # This function simply gets two MRI images as inputs and overlays them 
    #using different colors for each image. Used as a diagnostic method.
        
    fig, (ax1, ax2, ax3) = plt.subplots(1,3)
    fig.suptitle(title, fontsize=20)
    ax2.title.set_text(subtitle)
    
    epi_img = nib.load(base_image)
    epi_img_data = epi_img.get_fdata()
    ax1.imshow(epi_img_data[x,:,:], cmap="gray")
    ax2.imshow(epi_img_data[:,y,:], cmap="gray")
    ax3.imshow(epi_img_data[:,:,z], cmap="gray")
    ax1.axis('off')
    ax2.axis('off')
    ax3.axis('off')  
    
    if overlay != 'NA':
        epi_img = nib.load(overlay)
        epi_img_data = epi_img.get_fdata()
        ax1.imshow(epi_img_data[x,:,:], cmap="hot", alpha=0.4)
        ax2.imshow(epi_img_data[:,y,:], cmap="hot", alpha=0.4)
        ax3.imshow(epi_img_data[:,:,z], cmap="hot", alpha=0.4)
        ax1.axis('off')
        ax2.axis('off')
        ax3.axis('off')

    plt.savefig(os.path.join(output_folder, subject_id + '_' + filename))    
    
    return (output_folder)
    
def make_gif(image_folder, gif_name, output_folder):
    images = []
    for filename in os.listdir(image_folder):
        images.append(imageio.imread(os.path.join(image_folder, filename)))
        imageio.mimsave('/%s/%s.gif' % (output_folder, gif_name), images, duration=0.9)

###################### Define the Paths and parameters ###########################

# os.system('cat /proc/cpuinfo')

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
os.system('mkdir %s'%first_output_dir)
invivo_template = '/opt/invivoTemplate.nii.gz'
resampled_template_path = '/opt/2x2x2resampled_invivoTemplate.nii.gz'
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
ants_path = '/usr/lib/ants/'
fsl_path = 'FSLDIR=/usr/lib/fsl/5.0;. /etc/fsl/5.0/fsl.sh;PATH=${FSLDIR}:${PATH};export FSLDIR PATH;/usr/lib/fsl/5.0/'

# Get the time series
fMRITimeSeries_folder = os.path.join(flywheel_base, 'input/fMRITimeSeries')
file_name = os.listdir(fMRITimeSeries_folder)[0]
fMRITimeSeries_name = os.path.join(fMRITimeSeries_folder, file_name)

# Unzip the structural zip
preprocessedStruct_folder = os.path.join(flywheel_base, 'input/StructZip')
preprocessedStruct = os.path.join(preprocessedStruct_folder, os.listdir(preprocessedStruct_folder)[0]) 
struct_folder = '/opt/struct'
os.system('mkdir %s' % struct_folder)
os.system('unzip -q %s -d %s' % (preprocessedStruct, struct_folder))

# Create the scout folder and get the scout images
scout_folder = '/opt/scout'
os.system('mkdir %s' % scout_folder)

fMRIScoutAP_folder = os.path.join(flywheel_base, 'input/fMRIScoutAP')
if os.path.exists(fMRIScoutAP_folder):
    fMRIScoutAP = os.path.join(fMRIScoutAP_folder, os.listdir(fMRIScoutAP_folder)[0])
    os.system('cp %s %s' % (fMRIScoutAP, scout_folder))

fMRIScoutPA_folder = os.path.join(flywheel_base, 'input/fMRIScoutPA')
if os.path.exists(fMRIScoutPA_folder):
    fMRIScoutPA = os.path.join(fMRIScoutPA_folder, os.listdir(fMRIScoutPA_folder)[0])
    os.system('cp %s %s' % (fMRIScoutPA, scout_folder))

###################Parse Config Here############################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

total_readout_time_AP = config['totalReadoutTimeAP']
total_readout_time_PA = config['totalReadoutTimePA']
saveIntermediateFiles = config['saveIntermediateFiles']
fMRIName = config['fMRIName']

# Get the subject id and set some more paths
with open ('%s' % os.path.join(struct_folder, 'subject_id.txt'), 'r') as idfile:
    subject_id = idfile.readlines()[0]
generic_affine = os.path.join(struct_folder, subject_id + '_reg_avgmprage2atlas', subject_id + '_0GenericAffine.mat')
path_to_warp = os.path.join(struct_folder, subject_id + '_reg_avgmprage2atlas', subject_id + '_1Warp.nii.gz')

# If specified, add the fMRIName to subject id
if fMRIName != 'NA':
    subject_id = subject_id + '_' + fMRIName

###################Run Algorithm################################
# Topup
(image_name, scout_topuped, corrected_epi) = topup(fMRITimeSeries_name, 0.0217349, 0.0217349, scout_folder, first_output_dir, fsl_path=fsl_path, ants_path=ants_path)
# Moco
(motion_corrected_image, confound_file) = moco(subject_id, image_name, corrected_epi, first_output_dir, fsl_path=fsl_path)
# register to topuped scout image
(warped_to_scout, scout_affine_matrix) = registerToScout(subject_id, motion_corrected_image, scout_topuped, first_output_dir, fsl_path=fsl_path, ants_path=ants_path)
# Register to templagte
warped_image = apply_warp(image_name, subject_id, motion_corrected_image, resampled_template_path, first_output_dir, scout_affine_matrix, generic_affine, path_to_warp, fsl_path=fsl_path, ants_path=ants_path)
# Set zero outside the brain
set_zero(warped_image, resampled_template_path, warped_image)

# Plots
plot_dir = os.path.join(first_output_dir, 'plots')
os.system('mkdir %s' % plot_dir)

epi_to_scout = os.path.join(plot_dir, 'epi2scout_plots')
os.system('mkdir %s' % epi_to_scout)

epi_to_template = os.path.join(plot_dir, 'epi2template_plots')
os.system('mkdir %s' % epi_to_template)

first_tr_warped = os.path.join(plot_dir, 'warped_first_tr.nii.gz')
os.system('%s %s %s 0 1' % (os.path.join(fsl_path, 'fslroi'), warped_image, first_tr_warped))

scout_registered_first_tr = os.path.join(plot_dir, 'scout_registered_first_tr.nii.gz')
os.system('%s %s %s 0 1' % (os.path.join(fsl_path, 'fslroi'), warped_to_scout, scout_registered_first_tr))

make_plot(subject_id, scout_topuped, 'NA', subject_id + ' EPI_2_Scout', 'topuped scout', subject_id + '_invivo.png', 30, 20, 10, epi_to_scout)
make_plot(subject_id, scout_registered_first_tr, 'NA', subject_id + ' EPI_2_Scout', 'registered_epi', subject_id + '_final.png', 30, 20, 10, epi_to_scout)

make_plot(subject_id, resampled_template_path, 'NA', subject_id + ' EPI_2_Template', 'template', subject_id + '_invivo.png', 26, 23, 26, epi_to_template)
make_plot(subject_id, first_tr_warped, 'NA', subject_id + ' EPI_2_Template', 'warped_epi', subject_id + '_final.png', 26, 23, 26, epi_to_template)

# Move the final save files 
make_gif(epi_to_scout, 'EPI_2_Scout', final_output_dir)
make_gif(epi_to_template, 'EPI_2_Template', final_output_dir)
os.system('cp %s/moco/*.png %s' % (first_output_dir, final_output_dir))
os.system('zip -r -j %s %s/2motion_corrected_epi/*.txt %s' % (os.path.join(final_output_dir, subject_id + '_preprocessedFunc.zip'), first_output_dir, warped_image))
if saveIntermediateFiles == True:
    os.system('cd %s; zip %s -r *' % (first_output_dir, os.path.join(final_output_dir, subject_id + '_intermediateFiles.zip')))

