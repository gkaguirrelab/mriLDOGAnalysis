#!/usr/local/bin/python3.7

import os, json
import nibabel as nib
os.system('pip3 install matplotlib')
import matplotlib.pyplot as plt
import numpy as np
###################### Define the Paths and parameters ###########################

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
mcr_path = '/usr/local/MATLAB/MATLAB_Runtime/v98/'
compiled_matlab_func = '/opt/restingState/run_restingState.sh'
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
os.system('mkdir %s' % first_output_dir)

################### Set some functions ############################

def make_plot(subject_id, base_image, overlay, title, subtitle, filename, x, y, z, min_thr, max_thr, output_folder):

    # This function simply gets two MRI images as inputs and overlays them 
    #using different colors for each image. Used as a diagnostic method.

    fig, (ax1, ax2, ax3) = plt.subplots(1,3)
    fig.suptitle(title, fontsize=20)
    ax2.title.set_text(subtitle)

    epi_img = nib.load(base_image)
    epi_img_data = epi_img.get_fdata()
    ax1.imshow(epi_img_data[x,:,:], cmap="gray")
    ax2.imshow(epi_img_data[:,y,:], cmap="gray")
    ax3.imshow(epi_img_data[:,:,z], cmap="gray")
    ax1.axis('off')
    ax2.axis('off')
    ax3.axis('off')  

    if overlay != 'NA':
        epi_img = nib.load(overlay)
        epi_img_data = epi_img.get_fdata()
        epi_img_data[epi_img_data <= min_thr] = 0
        epi_img_data[epi_img_data >= max_thr] = 0
        ax1.imshow(epi_img_data[x,:,:], cmap="hot", alpha=0.6)
        ax2.imshow(epi_img_data[:,y,:], cmap="hot", alpha=0.6)
        ax3.imshow(epi_img_data[:,:,z], cmap="hot", alpha=0.6)
        ax1.axis('off')
        ax2.axis('off')
        ax3.axis('off')

    plt.savefig(os.path.join(output_folder, subject_id + '_' + filename))    

    return (output_folder)

################### Parse config ##################################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

seedBasedLabelNames = config['seedBasedLabelNames']

################### Run Algorithm ################################
        
# Get inputs
templateImageFolder = os.path.join(flywheel_base, 'input/templateImage/')
if os.path.exists(templateImageFolder):
    templateImage = os.path.join(templateImageFolder, os.listdir(templateImageFolder)[0])
else:
    templateImage = 'NA'

ldogFixArchiveFolder = os.path.join(flywheel_base, 'input/ldogFixArchive/')
if os.path.exists(ldogFixArchiveFolder):
    ldogFixArchive = os.path.join(ldogFixArchiveFolder, os.listdir(ldogFixArchiveFolder)[0])

parcellationsOneFolder = os.path.join(flywheel_base, 'input/parcellationsOne/')
if os.path.exists(parcellationsOneFolder):
    parcellationsOne = os.path.join(parcellationsOneFolder, os.listdir(parcellationsOneFolder)[0])

parcellationsTwoFolder = os.path.join(flywheel_base, 'input/parcellationsTwo/')
if os.path.exists(parcellationsTwoFolder):
    parcellationsTwo = os.path.join(parcellationsTwoFolder, os.listdir(parcellationsTwoFolder)[0])
else:
    parcellationsTwo = 'NA'
    
labelsOneFolder = os.path.join(flywheel_base, 'input/labelsOne/')
if os.path.exists(labelsOneFolder):
    labelsOne = os.path.join(labelsOneFolder, os.listdir(labelsOneFolder)[0])
    
labelsTwoFolder = os.path.join(flywheel_base, 'input/labelsTwo/')
if os.path.exists(labelsTwoFolder):
    labelsTwo = os.path.join(labelsTwoFolder, os.listdir(labelsTwoFolder)[0])
else:
    labelsTwo = 'NA'

os.system('mkdir %s' % (os.path.join(first_output_dir, 'temp')))
# Run motion regression
cmd = "%s %s %s %s %s %s %s %s %s %s" % (compiled_matlab_func, mcr_path, ldogFixArchive, first_output_dir, 
                                                             final_output_dir, parcellationsOne, parcellationsTwo,
                                                             labelsOne, labelsTwo, seedBasedLabelNames)
os.system(cmd)    

################### Plotting and saving ##################################
# Get the first func space
if seedBasedLabelNames != 'NA' and templateImage != 'NA':
    templateLoaded = nib.load(templateImage)
    templateData = templateLoaded.get_fdata()
    size = templateData.shape
    for i in os.listdir(final_output_dir):
        if '.nii.gz' in i:
            imageToPlot = os.path.join(final_output_dir, i)
            loadedImage = nib.load(imageToPlot)
            data = loadedImage.get_fdata()
            loc = np.where(data == np.max(data))
            make_plot('subject', templateImage, imageToPlot, i, i, i[:7] + '.png', loc[0][0], loc[1][0], loc[2][0], 0.3, 0.7, final_output_dir)
    
    # Zip the files
    os.system('cd %s; zip %s/R2maps.zip *.gz' % (final_output_dir, final_output_dir))
    os.system('cd %s; rm *.gz' % (final_output_dir))