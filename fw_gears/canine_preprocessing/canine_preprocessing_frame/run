#!/usr/bin/python3

import os
os.system("mv /usr/local/MATLAB/MATLAB_Runtime/v97/bin/glnxa64/libexpat.so.1 /usr/local/MATLAB/MATLAB_Runtime/v97/bin/glnxa64/libexpat.so.1-appended")
import json

os.system('cat /proc/cpuinfo')

# Flywheel path
flywheel_base ='/flywheel/v0/'

# Path to input folder 
func_zip_folder01 = os.path.join(flywheel_base, 'input/funcZip01')
func_zip_folder02 = os.path.join(flywheel_base, 'input/funcZip02')
func_zip_folder03 = os.path.join(flywheel_base, 'input/funcZip03')
func_zip_folder04 = os.path.join(flywheel_base, 'input/funcZip04')
func_zip_folder05 = os.path.join(flywheel_base, 'input/funcZip05')
stim_file_folder = os.path.join(flywheel_base, 'input/stimFile')
struct_zip_folder = os.path.join(flywheel_base, 'input/structZip')
mask_file_folder = os.path.join(flywheel_base, 'input/maskFile')
payload_file_folder = os.path.join(flywheel_base, 'input/payloadFile')

# Set path to required inputs
func_zip_path01 = os.path.join(func_zip_folder01, os.listdir(func_zip_folder01)[0])
stim_file_path = os.path.join(stim_file_folder, os.listdir(stim_file_folder)[0])
struct_zip_path = os.path.join(struct_zip_folder, os.listdir(struct_zip_folder)[0])

# Set path to optional paths   
if os.path.isdir(func_zip_folder02) == True:    
    func_zip_path02 = os.path.join(func_zip_folder02, os.listdir(func_zip_folder02)[0])
else:
    func_zip_path02 = 'Na'
if os.path.isdir(func_zip_folder03) == True:    
    func_zip_path03 = os.path.join(func_zip_folder03, os.listdir(func_zip_folder03)[0])
else:
    func_zip_path03 = 'Na'
if os.path.isdir(func_zip_folder04) == True:    
    func_zip_path04 = os.path.join(func_zip_folder04, os.listdir(func_zip_folder04)[0])
else:
    func_zip_path04 = 'Na'
if os.path.isdir(func_zip_folder05) == True:    
    func_zip_path05 = os.path.join(func_zip_folder05, os.listdir(func_zip_folder05)[0])
else:
    func_zip_path05 = 'Na'
if os.path.isdir(mask_file_folder) == True:    
    mask_file_path = os.path.join(mask_file_folder, os.listdir(mask_file_folder)[0])
else:
    mask_file_path = 'Na'
if os.path.isdir(payload_file_folder) == True:    
    payload_file_path = os.path.join(mask_file_folder, os.listdir(payload_file_folder)[0])
else:
    payload_file_path = 'Na'

# Set other paths
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
matlab_func = '/opt/func_input/run_mainWrapper.sh'
first_output_dir = '/firstOutput'
final_output_dir = os.path.join(flywheel_base, 'output')
mcr_path = '/usr/local/MATLAB/MATLAB_Runtime/v97' #path to MATLAB runtime
workbench_path = '/usr/bin/wb_command'
path_to_python_func = '/opt/make_fsaverage.py'

os.system('mkdir %s'%first_output_dir)
###################Parse Config Here############################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

dataFileType = config['dataFileType']
dataSourceType = config['dataSourceType']
trimDummyStimTRs = config['trimDummyStimTRs']
averageAcquisitions = config['averageAcquisitions']
tr = config['tr']
modelClass = config['modelClass']
averageVoxels = config['averageVoxels']
modelOpts = '{' + config['modelOpts'] + '}'

# Create a folder for hcpstruct config
hcpconfpath = '/opt/hcpconf'
os.system('mkdir %s' % hcpconfpath)

# Extract the hcp config into the configfolder
os.system('unzip -j %s \'*/*.json\' -d %s' % (struct_zip_path, hcpconfpath))

hcpconfig = os.path.join(hcpconfpath, os.listdir(hcpconfpath)[0])
with open(hcpconfig) as hcpconf:
    job_config2 = json.load(hcpconf)
config2 = job_config2['config']

subject_id = config2['Subject']
RegName = config2['RegName']

###################Run Algorithm################################
    
cmd = """%s %s -mcruserdata ParallelProfile:/usr/flywheel.mlsettings '%s' '%s' '%s' '%s' '%s' '%s' '%s' 'maskFilePath' '%s' \
'payloadPath' '%s' 'dataFileType' '%s' 'dataSourceType' '%s' \
'trimDummyStimTRs' '%s' 'averageAcquisitions' '%s' 'tr' '%s' \
'externalMGZMakerPath' '%s' 'RegName' '%s' 'modelClass' '%s' 'modelOpts' '%s' \
'workbenchPath' '%s' 'outPath' '%s' 'flywheelFlag' '1' 'Subject' '%s' 'averageVoxels' '%s'""" % (matlab_func, mcr_path, func_zip_path01, 
func_zip_path02, func_zip_path03, func_zip_path04, func_zip_path05, 
stim_file_path, struct_zip_path, mask_file_path, payload_file_path, dataFileType, 
dataSourceType, trimDummyStimTRs, averageAcquisitions, tr, path_to_python_func, 
RegName, modelClass, modelOpts, workbench_path, first_output_dir, subject_id, averageVoxels)

os.system(cmd)        

################## Zip everything and output ##################################

# Move mat, pdf and png files to the final output folder
os.system('cd %s; mv %s %s/'%(first_output_dir, '*.mat', final_output_dir)) 
os.system('cd %s; mv %s %s/'%(first_output_dir, '*.pdf', final_output_dir)) 
os.system('cd %s; mv %s %s/'%(first_output_dir, '*.png', final_output_dir)) 

# Zip and move the maps
os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'%s_maps_cifti' % subject_id), os.path.join(final_output_dir,'%s_maps_cifti.zip' % subject_id)))
os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'%s_maps_nativeMGZ' % subject_id), os.path.join(final_output_dir,'%s_maps_nativeMGZ.zip' % subject_id)))
os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'%s_maps_nativeMGZ_pseudoHemisphere' % subject_id), os.path.join(final_output_dir,'%s_maps_nativeMGZ_pseudoHemisphere.zip' % subject_id)))
