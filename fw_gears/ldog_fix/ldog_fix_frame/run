#!/usr/bin/python3

import os 
import json
import nibabel as nb
import numpy as np

###################### Define the Paths and parameters ###########################

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
mcr_path = '/usr/local/MATLAB/MATLAB_Runtime/v97/'
compiled_matlab_func = '/opt/regressMotion/run_regressMotion.sh'
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
os.system('mkdir %s'%first_output_dir)

################### Parse config ##############################################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

smoothingSigma = config['smoothingSigma']
archiveName = config['archiveName']
convertToPercentChangeSignal = config['convertToPercentChangeSignal']

################### Run Algorithm ################################

# Get stim file input
stim_folder = os.path.join(flywheel_base, 'input/stimFile/')
if os.path.exists(stim_folder):
    stim_file = os.path.join(stim_folder, os.listdir(stim_folder)[0])
else:
    stim_file = 'Na'

num_img = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', 
           '12', '13', '14', '15', '16', '17', '18', '19', '20']

# Creatre a working dir as input folder modifications are not allowed 
working_dir = '/tmp/workdir'
os.system('mkdir %s' % working_dir)

for i in num_img:   
    key_name = 'EPI_' + i
    folder_name = os.path.join(flywheel_base, 'input/%s' % key_name)
    if os.path.exists(folder_name):
        zip_name = os.listdir(folder_name)[0]    
        zip_file = os.path.join(folder_name, zip_name)
        subj_sess_name = zip_name[:-21]
        os.system('unzip -q %s -d %s/files/' % (zip_file, folder_name))
        new_folder_path = os.path.join(first_output_dir, key_name)
        os.system('mkdir %s' % new_folder_path)
        for file in os.listdir(os.path.join(folder_name, 'files')):
            if file[-3:] == 'txt':
                motion_params = os.path.join(folder_name, 'files', file)
            if file[-3:] == '.gz':
                image_file = os.path.join(folder_name, 'files', file)
                new_image_location = os.path.join(working_dir, file)
                os.system('cp %s %s' % (image_file, new_image_location))
                
                if smoothingSigma != 'NA':
                    # image_raw = nb.load(new_image_location)
                    # image_data = image_raw.get_data()
                    # volume_num = np.shape(image_data)[3]
                    # first_image = image_data[:,:,:,0]
                    # for i in range(volume_num):
                    #     idx = i + 1
                    #     if idx == 112:
                    #         continue
                    #     else:
                    #         first_image = np.add(first_image, image_data[:,:,:,idx])                   
                                             
                    # averaged_image = first_image / volume_num   
                    # averaged_image = np.nan_to_num(averaged_image, nan=0)
                    # zeroindexes = np.where(averaged_image == 0) 
                    newname = new_image_location.replace('preprocessedMoReg','preprocessedMoRegSmooth')
                    os.system('FSLDIR=/usr/lib/fsl/5.0;. /etc/fsl/5.0/fsl.sh;PATH=${FSLDIR}:${PATH};export FSLDIR PATH;/usr/lib/fsl/5.0/fslmaths %s -kernel gauss %s -fmean %s' % (newname, float(smoothingSigma), newname))                   
                    # smooth_image_raw = nb.load(new_image_location)
                    # smooth_image_data = smooth_image_raw.get_data()
    
                    # for i in range(np.shape(smooth_image_data)[3]):
                    #     smooth_image_data[zeroindexes] = 2000
                    #     nb.save(smooth_image_raw, os.path.join(final_output_dir, 'lala.nii.gz'))
                    
                    cmd = "%s %s %s %s %s 'convertToPercentChangeSignal' %s 'stimFile' %s" % (compiled_matlab_func, mcr_path, newname, motion_params, first_output_dir, convertToPercentChangeSignal, stim_file)
                    os.system(cmd)
                else:
                    cmd = "%s %s %s %s %s 'convertToPercentChangeSignal' %s 'stimFile' %s" % (compiled_matlab_func, mcr_path, newname, motion_params, first_output_dir, convertToPercentChangeSignal, stim_file)
                    os.system(cmd)                    
            
################## Zip everything and output ##################################

# Zip and move the maps
print(os.listdir(first_output_dir))
os.system('cd %s; zip -q -r %s/%s *' % (first_output_dir, final_output_dir, archiveName))
