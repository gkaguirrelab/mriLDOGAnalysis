#!/usr/local/bin/python3.7

import os 
import json
import nibabel as nb
import numpy as np
import imageio
import matplotlib.pyplot as plt
os.system('pip3 install natsort')
from natsort import natsorted
###################### Define the Paths and parameters ###########################

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
mcr_path = '/usr/local/MATLAB/MATLAB_Runtime/v98/'
compiled_matlab_func = '/opt/regressMotion/run_regressMotion.sh'
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
os.system('mkdir %s'%first_output_dir)
fsl_path = 'FSLDIR=/usr/lib/fsl/5.0;. /etc/fsl/5.0/fsl.sh;PATH=${FSLDIR}:${PATH};export FSLDIR PATH;/usr/lib/fsl/5.0'
ants_path = '/usr/lib/ants/'
resampled_template_path = '/opt/2x2x2resampled_invivoTemplate.nii.gz'

################### Parse config ##############################################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

smoothingSigma = config['smoothingSigma']
archiveName = config['archiveName']
convertToPercentChangeSignal = config['convertToPercentChangeSignal']
makePseudoHemisphere = config['makePseudoHemisphere']
regressGlobalSignal  = config['regressGlobalSignal']
voxelMADthresh = config['voxelMADthresh']
meanMADthresh = config['meanMADthresh']

################### Run Algorithm ################################

def make_plot(subject_id, base_image, overlay, title, subtitle, filename, x, y, z, output_folder):
    
    # This function simply gets two MRI images as inputs and overlays them 
    #using different colors for each image. Used as a diagnostic method.
        
    fig, (ax1, ax2, ax3) = plt.subplots(1,3)
    fig.suptitle(title, fontsize=20)
    ax2.title.set_text(subtitle)
    
    epi_img = nb.load(base_image)
    epi_img_data = epi_img.get_fdata()
    ax1.imshow(epi_img_data[x,:,:], cmap="gray")
    ax2.imshow(epi_img_data[:,y,:], cmap="gray")
    ax3.imshow(epi_img_data[:,:,z], cmap="gray")
    ax1.axis('off')
    ax2.axis('off')
    ax3.axis('off')  
    
    if overlay != 'NA':
        epi_img = nb.load(overlay)
        epi_img_data = epi_img.get_fdata()
        ax1.imshow(epi_img_data[x,:,:], cmap="hot", alpha=0.4)
        ax2.imshow(epi_img_data[:,y,:], cmap="hot", alpha=0.4)
        ax3.imshow(epi_img_data[:,:,z], cmap="hot", alpha=0.4)
        ax1.axis('off')
        ax2.axis('off')
        ax3.axis('off')

    plt.savefig(os.path.join(output_folder, subject_id + '_' + filename))    
    
    return (output_folder)

def make_gif(image_folder, gif_name, output_folder, speed=0.3):
    image_names = os.listdir(image_folder)
    image_names = natsorted(image_names)
    images = []
    for filename in image_names:
        images.append(imageio.imread(os.path.join(image_folder, filename)))
    imageio.mimsave('/%s/%s.gif' % (output_folder, gif_name), images, duration=speed)
        
# Get stim file input
stim_folder = os.path.join(flywheel_base, 'input/stimFile/')
if os.path.exists(stim_folder):
    stim_file = os.path.join(stim_folder, os.listdir(stim_folder)[0])
else:
    stim_file = 'Na'

num_img = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', 
           '12', '13', '14', '15', '16', '17', '18', '19', '20']

for i in num_img:   
    
    # Make the folders here
    key_name = 'EPI_' + i
    folder_name = os.path.join(flywheel_base, 'input/%s' % key_name)
    if os.path.exists(folder_name):
        zip_name = os.listdir(folder_name)[0]    
        zip_file = os.path.join(folder_name, zip_name)
        subj_sess_name = zip_name[:-21]
        os.system('unzip -q %s -d %s/files/' % (zip_file, folder_name))
        new_folder_path = os.path.join(first_output_dir, key_name)
        os.system('mkdir %s' % new_folder_path)
        rawFmriDataPath = os.path.join(flywheel_base, 'input', 'raw_' + key_name)
        if os.path.exists(rawFmriDataPath):
            rawFmriData = os.path.join(rawFmriDataPath, os.listdir(rawFmriDataPath)[0])
        else:
            rawFmriData = 'Na'
        
        motion_params = os.path.join(os.path.join(folder_name, 'files'), [f for f in os.listdir(os.path.join(folder_name, 'files')) if f.endswith('.txt')][0])
        image_file = os.path.join(os.path.join(folder_name, 'files'), [f for f in os.listdir(os.path.join(folder_name, 'files')) if f.endswith('.gz')][0])

        tmp_working_dir = '/tmp/tmpworkingdir_%s' % key_name
        os.system('mkdir %s' % tmp_working_dir)
        os.system('cp %s %s' % (image_file, tmp_working_dir))
        new_image_location = os.path.join(tmp_working_dir, os.listdir(tmp_working_dir)[0])
                    
        if smoothingSigma != 'NA':                    
            # Get the zero indexes in the raw image                 
            image_raw = nb.load(new_image_location)
            image_data = image_raw.get_data()
            volume_num = np.shape(image_data)[3]
            first_image = image_data[:,:,:,0]
            for i in range(volume_num):
                idx = i + 1
                if idx == volume_num:
                    continue
                else:
                    first_image = np.add(first_image, image_data[:,:,:,idx])                   
                                                 
            averaged_image = first_image / volume_num   
            averaged_image = np.nan_to_num(averaged_image, nan=0)
            zeroindexes = np.where(averaged_image == 0)               
                    
            # Smooth the image
            os.system('%s %s -kernel gauss %s -fmean %s' % (os.path.join(fsl_path, 'fslmaths'),new_image_location, float(smoothingSigma), new_image_location))                
                       
            # Load the smooth image and set zero values
            smooth_image_raw = nb.load(new_image_location)
            smooth_image_data = smooth_image_raw.get_data()
                    
            smooth_image_data[zeroindexes] = 0
            nb.save(smooth_image_raw, new_image_location)
             
            # Run motion regression
            cmd = "%s %s %s %s %s 'convertToPercentChangeSignal' %s 'stimFile' %s 'regressGlobalSignal' %s 'rawFmriData' %s 'voxelMADthresh' %s 'meanMADthresh' %s" % (compiled_matlab_func, mcr_path, new_image_location, motion_params, new_folder_path, convertToPercentChangeSignal, stim_file, regressGlobalSignal, rawFmriData, voxelMADthresh, meanMADthresh)
            os.system(cmd)    
        else:
            cmd = "%s %s %s %s %s 'convertToPercentChangeSignal' %s 'stimFile' %s 'regressGlobalSignal' %s 'rawFmriData' %s 'voxelMADthresh' %s 'meanMADthresh' %s" % (compiled_matlab_func, mcr_path, new_image_location, motion_params, new_folder_path, convertToPercentChangeSignal, stim_file, regressGlobalSignal, rawFmriData, voxelMADthresh, meanMADthresh)
            os.system(cmd)                    
        
        # Make pseudo hemispheres if requested
        if makePseudoHemisphere == 'true':
            
            # Get registrations between flipped and original template
            affine_pseudo = '/opt/pseudoHemiRegistrations/flipped2Orig0GenericAffine.mat'
            warp_pseudo = '/opt/pseudoHemiRegistrations/flipped2Orig1Warp.nii.gz'  
            
            # First start by making a pseudohemi with the raw image so that 
            # we can make some diagnostic plots. We do this wit the raw image 
            # because we just want to use plots for checking if pseudo operation
            # worked well and percentage change operation when used makes it 
            # hard to judge
            
            # Set plot folder
            subject_id = os.path.split(image_file)[1][:-7]
            plot_folder = os.path.join(tmp_working_dir + 'image')
            os.system('mkdir %s' % (plot_folder))
            
            # Take the first TR of raw image and plot it
            single_image = '/tmp/singleTR.nii.gz'
            os.system('%s %s %s 0 1' % (os.path.join(fsl_path, 'fslroi'), image_file, single_image))
            make_plot(subject_id, single_image, 'NA', 'Original image and Pseudo hemi' , 'original', 'original.png', 26, 23, 26, plot_folder)
            
            # Flip the raw image
            plot_flipped = '/tmp/flipped.nii.gz'
            os.system('%s %s -x y z %s' % (os.path.join(fsl_path, 'fslswapdim'), image_file, plot_flipped))
            
            # Register the flipped image
            plot_registered = '/tmp/registered.nii.gz'
            os.system('%s -i %s -r %s -t %s -t %s -o %s -e 3' % (os.path.join(ants_path, 'antsApplyTransforms'), plot_flipped, resampled_template_path, warp_pseudo, affine_pseudo, plot_registered))   
            
            # Average the raw and registered
            plot_averaged = '/tmp/averaged.nii.gz'
            os.system('%s %s -add %s -div 2 %s' % (os.path.join(fsl_path, 'fslmaths'), image_file, plot_registered, plot_averaged))
            
            # Get a single TR and plot it
            os.system('%s %s %s 0 1' % (os.path.join(fsl_path, 'fslroi'), plot_averaged, single_image))
            make_plot(subject_id, single_image, 'NA', 'riginal image and Pseudo hemi', 'pseudo', 'pseudo.png', 26, 23, 26, plot_folder)
            
            # Make a gif from raw and pseudo image
            make_gif(plot_folder, os.path.split(image_file)[1][:-7], final_output_dir, speed=0.9)
            
            ######## Do it for real now on the processed image ################
           
            # Create folder
            pseudo_hemi_folder = os.path.join(tmp_working_dir, 'pseudoHemi')
            os.system('mkdir %s' % pseudo_hemi_folder)
            
            # Flip the image
            for i in os.listdir(new_folder_path):
                if i[-2:] == 'gz':
                    processed_image_path = os.path.join(new_folder_path, i)
            flipped_image = os.path.join(pseudo_hemi_folder, 'flipped.nii.gz')
            os.system('%s %s -x y z %s' % (os.path.join(fsl_path, 'fslswapdim'), processed_image_path, flipped_image))
            
            # Apply the flip to orig registration we calculated on the template
            registered_flipped = os.path.join(pseudo_hemi_folder, 'registered_flipped.nii.gz')
            os.system('%s -i %s -r %s -t %s -t %s -o %s -e 3' % (os.path.join(ants_path, 'antsApplyTransforms'), flipped_image, resampled_template_path, warp_pseudo, affine_pseudo, registered_flipped))   
            os.system('%s %s -add %s -div 2 %s' % (os.path.join(fsl_path, 'fslmaths'), processed_image_path, registered_flipped, processed_image_path))          

        if os.path.exists(rawFmriDataPath):
            no_spike_dir = '/tmp/noSpikeDirectory'
            if not os.path.exists(no_spike_dir):
                os.system('mkdir %s' % no_spike_dir)
            how_many_spiky = []
            for i in os.listdir(os.path.join(new_folder_path, 'spikeSlices')):
                if 'TR' in i:
                    how_many_spiky.append(i)          
            if len(how_many_spiky) != 0:
                os.system('cd %s; mv confound.png %s' % (os.path.join(new_folder_path, 'spikeSlices'), os.path.join(final_output_dir, subj_sess_name + '_confound.png')))     
                os.system('cd %s; mv spikeDetection.png %s' % (os.path.join(new_folder_path, 'spikeSlices'), os.path.join(final_output_dir, subj_sess_name + '_spikePlot.png')))   
            else:
                os.system('cd %s; mv confound.png %s' % (os.path.join(new_folder_path, 'spikeSlices'), os.path.join(no_spike_dir, subj_sess_name + '_confound.png')))     
                os.system('cd %s; mv spikeDetection.png %s' % (os.path.join(new_folder_path, 'spikeSlices'), os.path.join(no_spike_dir, subj_sess_name + '_spikePlot.png')))                   
            for i in os.listdir(os.path.join(new_folder_path, 'spikeSlices')):
                if i[-2:] != 'gz':
                    make_gif(os.path.join(new_folder_path, 'spikeSlices', i), subj_sess_name + '_' + i, final_output_dir)
            os.system('rm -r %s' % os.path.join(new_folder_path, 'spikeSlices'))
################## Zip everything and output ##################################

# Zip and move the maps
if len(os.listdir(no_spike_dir)) != 0:
    os.system('cd %s; zip -q -r %s *' % (no_spike_dir, os.path.join(final_output_dir, 'allSpikePlots.zip')))
os.system('cd %s; zip -q -r %s/%s *' % (first_output_dir, final_output_dir, archiveName))
