function correctedFuncPath = regressMotion(epiPath, motionParamsPath, outputFolder)
% Pre-process the ldog func data to regress out the effects of motion
%
% Syntax:
%  correctedFuncPath = regressMotion(funcZipPath, motionParamsPath)
%
% Description
%   Loads a volumetric, 4D fMRI dataset and the motion parameter vectors
%   generated by the XXX routine. These vectors are treated as a regression
%   matrix and the effect of motion is removed from the data (preserving
%   signal mean). The motion-cleaned data is written back to disk.
%
%   Requires the Freesurfer MATLAB library to handle read/write operations.
%
% Inputs:
%   funcZipPath           - String. Path to zip files that contain the
%                           fMRI data to be analyzed. These zip files are
%                           the output of the ldogFunc.
%   motionParamsPath      - String. Path to a .txt file that contains the
%                           motion covariates.
%
% Optional key/value pairs:
%   none
%
% Outputs:
%   correctedFuncPath     - String. Full path to the uncompressed
%                           functional MRI data file that has undergone
%                           regression to remove the effects of motion.
%
% Examples:
%{
    funcZipPath = 'N292_112Reps_RightEyeStim_preprocessedFunc.zip';
    motionParamsPath = 'N292_112Reps_RightEyeStim_motion_params.txt';
    regressMotion(funcZipPath, motionParamsPath);
%}

%% Parse inputs
p = inputParser; p.KeepUnmatched = false;

% Required
p.addRequired('epiPath',@isstr);
p.addRequired('motionParamsPath',@isstr);
p.addRequired('outputFolder',@isstr);

% Parse
p.parse(epiPath, motionParamsPath, outputFolder)

% Extract the file name and extension from the full path 
[~,name,ext] = fileparts(epiPath);
acqusitionName = strcat(name, ext);

% Load the data
thisAcqData = MRIread(epiPath);

% Get the original shape of the data for later reshaping
originalShape = size(thisAcqData.vol);

% Reshape into a matrix
data = thisAcqData.vol;
data = single(data);
data = reshape(data, [size(data,1)*size(data,2)*size(data,3), size(data,4)]);
data(isnan(data)) = 0;

% Load and format the motion covariates
X = readmatrix(motionParamsPath);

% Check that the motion covariates and data match
if size(X,1) ~= size(data,2)
    error('regressMotion:mismatchRegressors','The data and motion parameters have different temporal lengths');
end

% Store the warning state
warningState = warning;

% Silence warnings.
warning('off','MATLAB:rankDeficientMatrix');

% Loop through the voxels and regress out the motion component
for vv = 1:size(data,1)
    datats = data(vv,:)';
    if all(datats==0)
        continue
    end
    meants = mean(datats);
    beta = X\datats;
    cleants = datats - X*beta + meants;
    data(vv,:) = cleants';
end

% Restore the warning state.
warning(warningState);

% Put the cleaned data back into the acquisition
thisAcqData.vol = data;

% Set the save name
newName = strrep(acqusitionName, '_preprocessed_','_preprocessedMoReg_');

% Save the motion corrected fMRI data
correctedFuncPath = fullfile(outputFolder,newName);
MRIwrite(thisAcqData,correctedFuncPath);

end % Main function
